local M = {}

local state = {
  has_rails_command = false,
  rails_commands = {},
  cache = {
    commands = nil,
  },
}

local function parse_rails_commands(output)
  local commands = {}
  local lines = vim.split(output, "\n")

  for i = 18, #lines do
    local command = vim.split(lines[i], " ")[1]
    if command and command ~= "" then
      table.insert(commands, command)
    end
  end

  return commands
end

local function get_rails_commands()
  if state.cache.commands then
    return state.cache.commands
  end

  local output = vim.fn.system("bin/rails -h")
  local commands = parse_rails_commands(output)
  state.cache.commands = "dev\ngenerate\nconsole\nserver\ntest\ntest:system\ndbconsole\n"
    .. table.concat(commands, "\n")
    .. "\ng\nc\ns\nt\ndb"

  return state.cache.commands
end

local function complete_rails_command(_, cmdline, _)
  if vim.fn.filereadable("./bin/rails") ~= 1 then
    return {}
  end

  -- Only show completions if we're completing the first argument
  local args = vim.split(cmdline, "%s+")
  if #args > 2 then
    return {}
  end

  local commands = get_rails_commands()
  return vim.split(commands, "\n")
end

local function execute_rails_command(opts)
  local args = vim.fn.trim(table.concat(opts.fargs, " "))
  local command = ""
  if args == "dev" then
    command = "bin/dev"
  else
    command = "bin/rails " .. args
  end
  vim.cmd.terminal([[echo -e "\033[33m$ ]] .. command .. [[\033[0m" && echo -e "" && ]] .. command)
end

local function clear_cache()
  state.cache.commands = nil
  vim.notify("Cleared Rails command cache.")
end

local function update_rails_command()
  local has_rails = vim.fn.filereadable("./bin/rails") == 1

  if has_rails and not state.has_rails_command then
    vim.api.nvim_create_user_command("Rails", execute_rails_command, {
      desc = "Execute Rails commands in a terminal buffer",
      nargs = "*",
      complete = complete_rails_command,
    })
    state.has_rails_command = true
  elseif not has_rails and state.has_rails_command then
    pcall(vim.api.nvim_del_user_command, "Rails")
    state.has_rails_command = false
  end
end

function M.setup()
  vim.api.nvim_create_user_command("RailsCacheClear", clear_cache, {
    desc = "Clear the cache of commands generated by :Rails",
    nargs = 0,
  })

  vim.api.nvim_create_autocmd("DirChanged", {
    group = vim.api.nvim_create_augroup("rails-command", { clear = true }),
    callback = update_rails_command,
  })

  update_rails_command()
end

return M
